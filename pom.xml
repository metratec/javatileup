<?xml version="1.0" encoding="utf-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.metratec.lib.tileup</groupId>
	<artifactId>TileUp</artifactId>
	<version>1.0</version>
	<packaging>jar</packaging>

	<name>Tile Up</name>

	<dependencies>
		<!--
			For CLI parsing
		-->
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.3.1</version>
		</dependency>
	</dependencies>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>com.metratec.lib.tileup.CLI</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<!--plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin-->
			<plugin>
				<groupId>com.zenjava</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>8.1.2</version>
				<!--
					Specifying the mainClass for the entire plugin allows
					us to execute the app via `mvn jfx:run` which needs
					to know the mainClass as well.
				-->
				<configuration>
					<mainClass>com.metratec.lib.tileup.CLI</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<!--
								this will be the Jar we actually distribute and we
								don't need a version in it
								(${project.build.finalName} includes one)
							-->
							<jfxMainAppJarName>${project.artifactId}</jfxMainAppJarName>
							<!--
								we cannot change the phase of this plugin and
								it always invokes `package` so we let it install
								its files in the already assembled directory
							-->
							<jfxAppOutputDir>
								${project.build.directory}/${project.build.finalName}-bin-with-dependencies
							</jfxAppOutputDir>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<executions>
					<execution>
						<id>generate-public-java-documentation</id>
						<goals>
							<goal>javadoc</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputDirectory>
								${project.build.directory}/docs/
							</outputDirectory>
							<reportOutputDirectory>
								${project.build.directory}/docs/
							</reportOutputDirectory>
							<show>public</show>
							<nohelp>true</nohelp>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.5.3</version>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/assemble/package.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>

